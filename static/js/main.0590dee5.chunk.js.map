{"version":3,"sources":["components/InputForm.js","actions/wiki.js","containers/InputForm.js","components/LoadingSpinner.js","components/Summary.js","containers/Summary.js","components/App.js","serviceWorker.js","reducers/wiki.js","index.js"],"names":["InputForm","keyDown","evt","text","target","value","trim","which","_this","props","onSave","react_default","a","createElement","placeholder","onKeyDown","this","Component","REQUEST_SUMMARY","requestSummary","title","type","RECEIVE_SUMMARY","receiveSummary","json","description","summary","extract","href","content_urls","desktop","page","thumbnailURL","thumbnail","source","RESET_SUMMARY","resetSummary","errored","connect","dispatch","txt","window","fetch","concat","encodeURIComponent","then","resp","LoadingSpinner","className","Summary","_ref","isRequesting","components_LoadingSpinner","alt","src","state","ownProps","App","containers_InputForm","containers_Summary","Boolean","location","hostname","match","initialState","beingRequested","store","createStore","arguments","length","undefined","action","Object","objectSpread","applyMiddleware","thunk","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0590dee5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class InputForm extends Component {\n  keyDown = (evt) => {\n    const text = evt.target.value.trim()\n    if (evt.which === 13 && text !== \"\") { // enter key\n      evt.target.value = \"\"\n      this.props.onSave(text)\n    }\n  }\n  render() {\n    return (\n      <input\n        placeholder='Type a page title...'\n        onKeyDown={this.keyDown}\n      />\n    )\n  }\n}\n","export const getSummary = title => (dispatch) => {\n  dispatch(requestSummary(title))\n  window.fetch(\n    `https://en.wikipedia.org/api/rest_v1/page/summary/\n    ${window.encodeURIComponent(title)}`\n  )\n    .then(resp => resp.json())\n    .then(json => {\n      if (json.type === 'standard') {\n        dispatch(receiveSummary(json))\n      } else {\n        dispatch(resetSummary(true))\n      }\n    })\n}\n\nexport const REQUEST_SUMMARY = 'REQUEST_SUMMARY'\nexport const requestSummary = (title) => ({\n  type: REQUEST_SUMMARY,\n  title: title\n})\n\nexport const RECEIVE_SUMMARY = 'RECEIVE_SUMMARY'\nexport const receiveSummary = (json) => ({\n  type: RECEIVE_SUMMARY,\n  title: json.title,\n  description: json.description,\n  summary: json.extract,\n  href: json.content_urls.desktop.page,\n  thumbnailURL: (!!json.thumbnail ? json.thumbnail.source : '') // ew\n})\n\nexport const RESET_SUMMARY = 'RESET_SUMMARY'\nexport const resetSummary = (errored) => ({ type: RESET_SUMMARY, errored: errored })\n","import { connect } from 'react-redux'\nimport InputForm from '../components/InputForm'\nimport { getSummary } from '../actions/wiki'\n\nconst mapDispatchToProps = dispatch => ({\n  onSave: (txt) => {\n    dispatch(getSummary(txt))\n  }\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(InputForm)\n","import React from 'react'\n\nconst LoadingSpinner = () => (\n  <div className='loadingSpinner' />\n)\n\nexport default LoadingSpinner\n","import React from 'react'\nimport LoadingSpinner from './LoadingSpinner'\n\nconst Summary = ({title, description, summary, href, thumbnailURL, isRequesting, errored}) => {\n  if (isRequesting) {\n    return <LoadingSpinner />\n  } else if (errored) {\n    return <p>Couldn't find that one - make sure you're typing a valid, unambiguous Wikipedia article name.</p>\n  } else if (!title) {\n    return <p>Enter a Wikipedia article title to begin.</p>\n  } else {\n    return (\n      <div>\n        <div className='headings'>\n          <h1>{title}</h1>\n          <small>{description}</small>\n        </div>\n        {!!thumbnailURL &&\n        <img alt={`Thumbnail for ${title}.`}src={thumbnailURL} />\n        }\n        <p>\n          {summary}\n          &nbsp;\n          <small>(<a href={href}>Read more...</a>)</small>\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default Summary\n","import { connect } from 'react-redux'\nimport Summary from '../components/Summary'\n\nconst mapStateToProps = (state, ownProps) => ({\n  title: state.title,\n  description: state.description,\n  summary: state.summary,\n  thumbnailURL: state.thumbnailURL,\n  href: state.href,\n  isRequesting: state.isRequesting,\n  errored: state.errored\n})\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Summary)\n","import React, { Component } from 'react'\nimport './App.css'\nimport InputForm from '../containers/InputForm'\nimport Summary from '../containers/Summary'\n\nclass App extends Component {\n  render () {\n    return (\n      <div className=\"wikicard\">\n        <InputForm />\n        <Summary />\n        <hr/>\n        <small>\n          App by <a href='https://bclindner.com'>Brian Lindner</a>\n          &nbsp;|\n          &nbsp;<a href=\"https://github.com/bclindner/react-redux-wiki\">Source code</a></small>\n      </div>\n    )\n  }\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  REQUEST_SUMMARY,\n  RECEIVE_SUMMARY,\n  RESET_SUMMARY\n} from '../actions/wiki.js'\n\nconst initialState = {\n  title: \"\",\n  description: \"\",\n  summary: \"\",\n  thumbnailURL: \"\",\n  href: \"\",\n  beingRequested: \"\",\n  isRequesting: false,\n  errored: false\n}\n\nexport default function wiki(state = initialState, action) {\n  switch(action.type) {\n    case REQUEST_SUMMARY:\n      return {\n        ...state,\n        isRequesting: true,\n        errored: false,\n        beingRequested: action.title,\n      }\n    case RECEIVE_SUMMARY:\n      return {\n        ...state,\n        isRequesting: false,\n        title: action.title,\n        description: action.description,\n        summary: action.summary,\n        thumbnailURL: action.thumbnailURL,\n        href: action.href\n      }\n    case RESET_SUMMARY:\n      return {\n        ...initialState,\n        errored: action.errored\n      }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport wiki from './reducers/wiki'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\n\nlet store = createStore(\n  wiki,\n  applyMiddleware(thunk)\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}